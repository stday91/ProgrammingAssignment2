my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
bye()
x <- c(4,"a", T)
class(x)
?class
library(swirl)
swirl
swirl()
library("swirl")
install_from_swirl("Data Analysis")
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- /Users/SeanDay
?
help
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
args(file.rename)
file.rename("mytest.R", "mytest2.R")
args(file.copy)
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
help
dir.create(file.path('testdir2', 'testdir3')), recursive=T
dir.create(file.path('testdir2', 'testdir3'), recursive=T)
dir.create(file.path('testdir2', 'testdir3'))
dir.create(file.path('testdir2', 'testdir3'), recursive=TRUE)
unlink('testdir2', recursive=T)
unlink('testdir2', recursive=TRUE)
setwd('old.dir')
setwd(old.dir)
unlink('testdir', recursive=TRUE)
swirl()
swirl()
1:20
pi:10
15:1
`:`
?`:`
seq(1,20)
seq(0,10,by=.5)
seq(5,10,length30)
seq(5,10,length=30)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
?seq_along
swirl
9
swirl()
num_vect <- c(0.5,55,-10,6)
tf num_vect < 1
tf <- num_vect <1
print(tf)
tf
num_vect >= 6
my_char <- "my", "name", "is"
my_char <- c("my", "name", "is")
my_char <- c("My", "char", "is")
my_char <-c("My", "name", "is")
my_char
paste(my_char, collapse= " ")
my_name <- c(my_char, "sean")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(1:3,c("X","Y","Z", sep=""))
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, sep="-")
exit
quit
clear.values
swirl()
library(swirl)
swirl()
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
inf-inf
Inf-Inf
x
x[1:10]
x[is.na(a)]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect <- c(11,2,NA)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector
)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes()
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames) <- my_data
colnames("cnames") <- my_data
colnames(my_data) <- cnames
my_data
TRUE == TURE
TRUE == TRUE
(F==T) ==F
(FALSE==TRUE) == FALSE
6==7
6<7
10<=10
5 != 7
5 != 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE | c(TRUEm, FALSE, FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 > 3.9
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
sumbit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11, num=5)
remainder(4,div=2)
args(remainder)
submit
submit
submit()
evaluate(stdev,c(1.4,3.6,7.9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x), {x+1}, 6)
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("YO!")
submit()
submit
submit()
mad_libs(place = "NY", adjective = "blue", noun = "cup")
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect(flags,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique)vals
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
swirl()
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls(plants)
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(plants, 10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace=TRUE, prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(1,size=100, prob=0.7)
flips2<- rbinom(n=100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(100,mean=100,sd=25)
rnorm(10,mean=100,sd=25)
rpois(5,mean=10)
?rpois
rpois(5)
rpois(5,10)
mypois <- replicate(100,rpois(5,10))
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
swirl()
library(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time > t1
Sys.time() > t1
Sys.time() - t1
difftiem(Sys.time(), t1, units='days')
difftime(Sys.time(), t1, units='days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist,y=cars$speed)
plot(x=cars$speed, y=cars$dist, xlab='Speed')
plot(x=cars$speed, y=cars$dist, xlab='Speed', ylab=
'Stopping Distance'
)
plot(x=cars$speed,y=cars$dist,ylab='Stopping Distance')
plot(x=cars$speed,y=cars$dist,xlab='Speed',ylab='Stopping Distance')
plot(cars,main='My Plot')
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
data(mtcars)
?boxplot()
?boxplot
boxplot(mtcars, mpg~cyl)
boxplot(data=mtcars, formula= mpg~cyl)
boxplot(formula=mpg~cyl, data=mtcars)
hist(mtcars$mpg)
add2 <- function(x,y) {
x+y
}
add2(3,5)
above <- function(x, n) {
use <- x>n
x[use]
}
x <- 1:20
above(x,12)
above <- function(x, n=10) {
use <- x>n
x[use]
}
above(x)
above(x,15)
above(x=x, n=11)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[i])
}
means
}
data(airquality)
a <- airquality
columnmeans(a)
columnmean(a)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[i], na.rm = removeNA)
}
means
}
columnmean(a)
a
airquality
colmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i], na.rm=removeNA)
}
means
}
colmean(airquality)
colmean(airquality,FALSE)
colmean(airquality,removeNA=F)
colmean(airquality,F)
x <- list(a=1:5, b=rnorm(10))
x
lapply(x,mean)
?runif
?rnorm
rnorm(200)
library(datasets)
data(iris)
?iris
head(iris)
length(iris$Species)
dim(iris)
split(iris,species)
split(iris,"Species")
virginica <- iris[,"virginica"]
iris$Species
str(iris)
head(iris)
iris[Species]
iris["Species"]
iris[,which(Species==virginica)]
iris[,which("Species" == "virginica"]
iris[5]
iris[,which("Species" == "virginica")]
split(iris,"Species)")
split(iris,"virginica")
virginica <- iris[,which(Species$virginica)]
virginica <- iris[,which("Species" == "virginica")]
virginica
virginica <- split(iris,"virginica")
virginica
dim(virignica)
dim(virginica)
virginica
dim(virginica)
lapply(iris,mean)
lapply(iris$Sepal.Length,mean)
?split
iris$species
iris$Species
split(iris,iris$Species)
sapply(split(iris,iris$Species),mean)
iris_species <- split(iris,iris$Species)
iris_species
iris_species$virginica
virginica <- iris_species$virginica
sapply(virginica,mean)
virginica2 <- split(iris,iris$Species)$virginica
virginica2
sapply(split(iris,species)$virginica,mean)
sapply(split(iris,iris$species)$virginica,mean)
apply(iris[,1:4],2,mean)
x <- apply(iris[,1:4],2,mean)
spec(x)
str(x)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
mean(mtcars$mpg,mtcars$cyl)
with(mtcars,tapply(mpg,cyl,mean))
?with
with(mtcars,tapply(hp,cyl,mean))
?mtcars
209.21429-82.63636
lebug(ls)
debug(ls)
ls()
setwd("~/data_science")
makeVector()
load("makeVector")
source("makeVector")
source("makeVector.R")
source('makeVector.R')
makeVector()
source('cachemean.R')
source('cachemean.R')
source('cachemean.R')
cachemean()
v1 <- makeVector(1:10)
v1
cachemean(1:10)
source('cachematrix.R')
setwd("~/data_science/ProgrammingAssignment2")
source('cachematrix.R')
makeCacheMatrix()
v1 <- makeCacheMatrix()
M1 <- replicate(10,rnorm(20))
M1
cacheSolve(M1)
makeCacheMatrix(M1)
cacheSolve()
cacheSolve(M1)
cacheSolve(makeCacheMatrix(M1))
